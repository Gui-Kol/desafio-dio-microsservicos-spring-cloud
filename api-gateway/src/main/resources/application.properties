# src/main/resources/application.properties

# Configuração do Servidor
server.port=8700
spring.application.name=api-gateway

# Configuração do Eureka Client
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Configuração do Spring Cloud Gateway
# Habilita o "discovery locator" para que o gateway possa encontrar serviços pelo nome no Eureka
spring.cloud.gateway.discovery.locator.enabled=true
# Converte o ID do serviço para minúsculas antes de procurar no Eureka (boa prática)
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Definição das Rotas do Gateway (configuração manual)
# --- Rota para o product-service ---
spring.cloud.gateway.routes[0].id=product-service-route
# lb:// indica que o gateway deve usar o Eureka para balanceamento de carga
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/products/**
# Remove o prefixo /api do caminho antes de encaminhar
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

# --- Rota para o order-service ---
spring.cloud.gateway.routes[1].id=order-service-route
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/orders/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

# Configuração para resolver o erro de BeanDefinitionOverrideException
# Permite que o Spring sobrescreva definições de beans duplicadas.
# Isso é uma solução para o conflito entre a segurança do Servlet e a do WebFlux no classpath.
spring.main.allow-bean-definition-overriding=true

# Nível de log para o Spring Security (útil para depuração de problemas de autenticação)
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.reactor.netty=DEBUG